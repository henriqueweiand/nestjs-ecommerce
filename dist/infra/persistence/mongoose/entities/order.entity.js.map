{"version":3,"sources":["../../../../../src/infra/persistence/mongoose/entities/order.entity.ts"],"sourcesContent":["import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport mongoose, { HydratedDocument } from 'mongoose';\nimport { Type } from 'class-transformer';\nimport { OrderProduct } from './order-product.entity';\nimport { User } from './user.entity';\n\nexport type OrderDocument = HydratedDocument<Order>;\n\n@Schema()\nexport class Order {\n  _id: mongoose.Schema.Types.ObjectId;\n\n  @Prop({ type: mongoose.Schema.Types.ObjectId, ref: User.name, })\n  @Type(() => User)\n  user: User;\n\n  @Prop({\n    type: [{ type: mongoose.Schema.Types.ObjectId, ref: OrderProduct.name }],\n  })\n  orderProduct: OrderProduct[];\n\n  @Prop()\n  total: number;\n\n  @Prop({ default: 'open' })\n  status: 'paid' | 'open' | 'canceled';\n\n  @Prop({ index: true })\n  paymentId?: string;\n\n  @Prop({ index: true })\n  paymentMethod?: 'stripe' | 'paddle' | 'paypal' | 'other';\n}\n\nconst OrderSchema = SchemaFactory.createForClass(Order);\n\nexport { OrderSchema };\n"],"names":["Order","OrderSchema","Prop","type","mongoose","Schema","Types","ObjectId","ref","User","name","Type","OrderProduct","default","index","SchemaFactory","createForClass"],"mappings":";;;;;;;;;;;IASaA,KAAK;eAALA;;IA2BJC,WAAW;eAAXA;;;0BApCmC;kEACD;kCACtB;oCACQ;4BACR;;;;;;;;;;;;;;;AAKd,IAAA,AAAMD,QAAN,MAAMA;AAuBb;;IApBGE,IAAAA,cAAI,EAAC;QAAEC,MAAMC,kBAAQ,CAACC,MAAM,CAACC,KAAK,CAACC,QAAQ;QAAEC,KAAKC,gBAAI,CAACC,IAAI;IAAE;IAC7DC,IAAAA,sBAAI,EAAC,IAAMF,gBAAI;uCACV,gBAAI,4BAAJ,gBAAI;GALCT;;IAOVE,IAAAA,cAAI,EAAC;QACJC,MAAM;YAAC;gBAAEA,MAAMC,kBAAQ,CAACC,MAAM,CAACC,KAAK,CAACC,QAAQ;gBAAEC,KAAKI,gCAAY,CAACF,IAAI;YAAC;SAAE;IAC1E;;GATWV;;IAYVE,IAAAA,cAAI;;GAZMF;;IAeVE,IAAAA,cAAI,EAAC;QAAEW,SAAS;IAAO;;GAfbb;;IAkBVE,IAAAA,cAAI,EAAC;QAAEY,OAAO;IAAK;;GAlBTd;;IAqBVE,IAAAA,cAAI,EAAC;QAAEY,OAAO;IAAK;;GArBTd;AAAAA;IADZK,IAAAA,gBAAM;GACML;AAyBb,MAAMC,cAAcc,uBAAa,CAACC,cAAc,CAAChB"}