{"version":3,"sources":["../../../../../src/infra/persistence/mongoose/repositories/mongoose-user.repositoy.ts"],"sourcesContent":["import { UserRepository } from \"@app/application/ecommerce/ports/user.repositoy\";\nimport { User } from \"@app/domain/ecommerce/user\";\nimport { Injectable } from \"@nestjs/common\";\nimport { InjectModel } from \"@nestjs/mongoose\";\nimport mongoose, { Model } from \"mongoose\";\nimport { User as UserMongoose } from \"../entities/user.entity\";\nimport { MongooseUserMapper } from \"../mapper/mongoose-user-mapper\";\nimport { MongooseUserDetailsMapper } from \"../mapper/mongoose-user-details-mapper\";\n\n@Injectable()\nexport class MongooseUserRepository implements UserRepository {\n    constructor(\n        @InjectModel(UserMongoose.name) private readonly userModel: Model<UserMongoose>,\n    ) { }\n\n    async findMany(): Promise<User[]> {\n        const findQuery = await this.userModel\n            .find()\n            .populate(['orders']);\n\n        return findQuery.map((item) => MongooseUserDetailsMapper.toDomain(item));\n    }\n\n    async create(user: User): Promise<User> {\n        const data = MongooseUserMapper.toMongoose(user);\n        const entity = new this.userModel({ ...data })\n        await entity.save();\n\n        return MongooseUserMapper.toDomain(entity);\n    }\n\n    async appendOrder(id: string, order: string): Promise<User> {\n        const updatedUser = await this.userModel.findByIdAndUpdate(\n            id,\n            {\n                $push: { orders: new mongoose.Types.ObjectId(order) },\n            },\n            { new: true }\n        );\n\n        return MongooseUserMapper.toDomain(updatedUser);\n    }\n}"],"names":["MongooseUserRepository","findMany","findQuery","userModel","find","populate","map","item","MongooseUserDetailsMapper","toDomain","create","user","data","MongooseUserMapper","toMongoose","entity","save","appendOrder","id","order","updatedUser","findByIdAndUpdate","$push","orders","mongoose","Types","ObjectId","new","constructor","Injectable","InjectModel","UserMongoose","name"],"mappings":";;;;+BAUaA;;;eAAAA;;;wBARc;0BACC;mEACI;4BACK;oCACF;2CACO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGnC,IAAA,AAAMA,yBAAN,MAAMA;IAKT,MAAMC,WAA4B;QAC9B,MAAMC,YAAY,MAAM,IAAI,CAACC,SAAS,CACjCC,IAAI,GACJC,QAAQ,CAAC;YAAC;SAAS;QAExB,OAAOH,UAAUI,GAAG,CAAC,CAACC,OAASC,oDAAyB,CAACC,QAAQ,CAACF;IACtE;IAEA,MAAMG,OAAOC,IAAU,EAAiB;QACpC,MAAMC,OAAOC,sCAAkB,CAACC,UAAU,CAACH;QAC3C,MAAMI,SAAS,IAAI,IAAI,CAACZ,SAAS,CAAC;YAAE,GAAGS,IAAI;QAAC;QAC5C,MAAMG,OAAOC,IAAI;QAEjB,OAAOH,sCAAkB,CAACJ,QAAQ,CAACM;IACvC;IAEA,MAAME,YAAYC,EAAU,EAAEC,KAAa,EAAiB;QACxD,MAAMC,cAAc,MAAM,IAAI,CAACjB,SAAS,CAACkB,iBAAiB,CACtDH,IACA;YACII,OAAO;gBAAEC,QAAQ,IAAIC,kBAAQ,CAACC,KAAK,CAACC,QAAQ,CAACP;YAAO;QACxD,GACA;YAAEQ,KAAK;QAAK;QAGhB,OAAOd,sCAAkB,CAACJ,QAAQ,CAACW;IACvC;IA9BAQ,YACI,AAAiDzB,SAA8B,CACjF;aADmDA,YAAAA;IACjD;AA6BR;AAhCaH;IADZ6B,IAAAA,kBAAU;IAGFC,aAAAA,IAAAA,qBAAW,EAACC,gBAAY,CAACC,IAAI;;;eAA8B,gBAAK,4BAAL,gBAAK;;GAF5DhC"}