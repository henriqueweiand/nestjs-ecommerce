{"version":3,"sources":["../../../../../src/infra/persistence/mongoose/repositories/mongoose-order.repositoy.ts"],"sourcesContent":["import { OrderProductRepository } from \"@app/application/ecommerce/ports/order-product.repositoy\";\nimport { OrderRepository } from \"@app/application/ecommerce/ports/order.repositoy\";\nimport { UserRepository } from \"@app/application/ecommerce/ports/user.repositoy\";\nimport { Order } from \"@app/domain/ecommerce/order\";\nimport { Injectable } from \"@nestjs/common\";\nimport { InjectModel } from \"@nestjs/mongoose\";\nimport mongoose, { Model } from \"mongoose\";\nimport { Order as OrderMongoose } from \"../entities/order.entity\";\nimport { MongooseOrderMapper } from \"../mapper/mongoose-order-mapper\";\nimport { MongooseOrderDetailsMapper } from \"../mapper/mongoose-order-details-mapper\";\n\n@Injectable()\nexport class MongooseOrderRepository implements OrderRepository {\n    constructor(\n        @InjectModel(OrderMongoose.name) private readonly orderModel: Model<OrderMongoose>,\n        private orderProductRepository: OrderProductRepository,\n        private userRepository: UserRepository\n    ) { }\n\n    async findMany(): Promise<Order[]> {\n        const findQuery = await this.orderModel\n            .find()\n            .populate(['orderProduct']);\n\n        return findQuery.map((item) => MongooseOrderDetailsMapper.toDomain(item));\n    }\n\n    async findById(id: string): Promise<Order> {\n        const findQuery = await this.orderModel\n            .findById(id)\n            .populate(['orderProduct']);\n\n        return MongooseOrderDetailsMapper.toDomain(findQuery);\n    }\n\n    async create(orderInput: Order): Promise<Order> {\n        let orderProductIds = [];\n\n        if (orderInput?.orderProduct.length) {\n            orderProductIds = await Promise.all(\n                orderInput.orderProduct.map(async (orderProduct) => {\n                    const orderProductCreated = await this.orderProductRepository.create(orderProduct);\n                    return orderProductCreated.id;\n                })\n            );\n        }\n\n        const data = MongooseOrderMapper.toMongoose(orderInput);\n        const order = new this.orderModel({\n            ...data,\n            user: {\n                \"_id\": new mongoose.Types.ObjectId(orderInput.user),\n            },\n            orderProduct: orderProductIds,\n        });\n\n        await this.userRepository.appendOrder(orderInput.user, order.id);\n\n        const savedOrder = await order.save();\n\n        return MongooseOrderMapper.toDomain(savedOrder);\n    }\n\n    async update(orderId: string, orderInput: Order): Promise<Order> {\n        const preparedData = MongooseOrderMapper.toMongoose(orderInput);\n\n        const order = await this.orderModel\n            .findOneAndUpdate(\n                {\n                    _id: orderId,\n                },\n                preparedData,\n                {\n                    new: true,\n                },\n            )\n            .exec();\n\n        return MongooseOrderMapper.toDomain(order);\n    }\n}"],"names":["MongooseOrderRepository","findMany","findQuery","orderModel","find","populate","map","item","MongooseOrderDetailsMapper","toDomain","findById","id","create","orderInput","orderProductIds","orderProduct","length","Promise","all","orderProductCreated","orderProductRepository","data","MongooseOrderMapper","toMongoose","order","user","mongoose","Types","ObjectId","userRepository","appendOrder","savedOrder","save","update","orderId","preparedData","findOneAndUpdate","_id","new","exec","constructor","Injectable","InjectModel","OrderMongoose","name"],"mappings":";;;;+BAYaA;;;eAAAA;;;uCAZ0B;+BAER;wBAEJ;0BACC;mEACI;6BACO;qCACH;4CACO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGpC,IAAA,AAAMA,0BAAN,MAAMA;IAOT,MAAMC,WAA6B;QAC/B,MAAMC,YAAY,MAAM,IAAI,CAACC,UAAU,CAClCC,IAAI,GACJC,QAAQ,CAAC;YAAC;SAAe;QAE9B,OAAOH,UAAUI,GAAG,CAAC,CAACC,OAASC,sDAA0B,CAACC,QAAQ,CAACF;IACvE;IAEA,MAAMG,SAASC,EAAU,EAAkB;QACvC,MAAMT,YAAY,MAAM,IAAI,CAACC,UAAU,CAClCO,QAAQ,CAACC,IACTN,QAAQ,CAAC;YAAC;SAAe;QAE9B,OAAOG,sDAA0B,CAACC,QAAQ,CAACP;IAC/C;IAEA,MAAMU,OAAOC,UAAiB,EAAkB;QAC5C,IAAIC,kBAAkB,EAAE;QAExB,IAAID,YAAYE,aAAaC,QAAQ;YACjCF,kBAAkB,MAAMG,QAAQC,GAAG,CAC/BL,WAAWE,YAAY,CAACT,GAAG,CAAC,OAAOS;gBAC/B,MAAMI,sBAAsB,MAAM,IAAI,CAACC,sBAAsB,CAACR,MAAM,CAACG;gBACrE,OAAOI,oBAAoBR,EAAE;YACjC;QAER;QAEA,MAAMU,OAAOC,wCAAmB,CAACC,UAAU,CAACV;QAC5C,MAAMW,QAAQ,IAAI,IAAI,CAACrB,UAAU,CAAC;YAC9B,GAAGkB,IAAI;YACPI,MAAM;gBACF,OAAO,IAAIC,kBAAQ,CAACC,KAAK,CAACC,QAAQ,CAACf,WAAWY,IAAI;YACtD;YACAV,cAAcD;QAClB;QAEA,MAAM,IAAI,CAACe,cAAc,CAACC,WAAW,CAACjB,WAAWY,IAAI,EAAED,MAAMb,EAAE;QAE/D,MAAMoB,aAAa,MAAMP,MAAMQ,IAAI;QAEnC,OAAOV,wCAAmB,CAACb,QAAQ,CAACsB;IACxC;IAEA,MAAME,OAAOC,OAAe,EAAErB,UAAiB,EAAkB;QAC7D,MAAMsB,eAAeb,wCAAmB,CAACC,UAAU,CAACV;QAEpD,MAAMW,QAAQ,MAAM,IAAI,CAACrB,UAAU,CAC9BiC,gBAAgB,CACb;YACIC,KAAKH;QACT,GACAC,cACA;YACIG,KAAK;QACT,GAEHC,IAAI;QAET,OAAOjB,wCAAmB,CAACb,QAAQ,CAACe;IACxC;IAlEAgB,YACI,AAAkDrC,UAAgC,EAClF,AAAQiB,sBAA8C,EACtD,AAAQS,cAA8B,CACxC;aAHoD1B,aAAAA;aAC1CiB,yBAAAA;aACAS,iBAAAA;IACR;AA+DR;AApEa7B;IADZyC,IAAAA,kBAAU;IAGFC,aAAAA,IAAAA,qBAAW,EAACC,kBAAa,CAACC,IAAI;;;eAA+B,gBAAK,4BAAL,gBAAK;eACnC,6CAAsB,4BAAtB,6CAAsB;eAC9B,6BAAc,4BAAd,6BAAc;;GAJjC5C"}