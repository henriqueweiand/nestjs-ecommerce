{"version":3,"sources":["../../../../../src/infra/persistence/prisma/repositories/prisma-order.repositoy.ts"],"sourcesContent":["import { OrderRepository } from \"@app/application/ecommerce/ports/order.repositoy\";\nimport { Order } from \"@app/domain/ecommerce/order\";\nimport { Injectable } from \"@nestjs/common\";\nimport { PrismaOrderDetailsMapper } from \"../mapper/prisma-order-details-mapper\";\nimport { PrismaOrderMapper } from \"../mapper/prisma-order-mapper\";\nimport { PrismaService } from \"../prisma.service\";\n\n@Injectable()\nexport class PrismaOrderRepository implements OrderRepository {\n    constructor(\n        private prisma: PrismaService,\n    ) { }\n\n    async findMany(): Promise<Order[]> {\n        const orders = await this.prisma.order.findMany({\n            include: {\n                orderProduct: true\n            }\n        });\n\n        return orders.map((item) => PrismaOrderDetailsMapper.toDomain(item));\n    }\n\n    async findById(id: string): Promise<Order> {\n        const order = await this.prisma.order.findFirst({\n            where: {\n                id\n            },\n            include: {\n                orderProduct: true\n            }\n        });\n\n        return PrismaOrderDetailsMapper.toDomain(order);\n    }\n\n    async create(orderInput: Order): Promise<Order> {\n        const data = PrismaOrderMapper.toPrisma(orderInput);\n\n        const orderProducts = orderInput.orderProduct.map(orderProduct => ({\n            productId: orderProduct.product,\n            price: orderProduct.price\n        }));\n\n        const order = await this.prisma.order.create({\n            data: {\n                ...data,\n                orderProduct: {\n                    create: orderProducts\n                }\n            },\n            include: {\n                orderProduct: true\n            }\n        });\n\n        return PrismaOrderMapper.toDomain(order);\n    }\n\n    async update(orderId: string, orderInput: Order): Promise<Order> {\n        const data = PrismaOrderMapper.toPrisma(orderInput);\n\n        const order = await this.prisma.order.update({\n            where: {\n                id: orderId\n            },\n            data,\n        });\n\n        return PrismaOrderMapper.toDomain(order);\n    }\n}"],"names":["PrismaOrderRepository","findMany","orders","prisma","order","include","orderProduct","map","item","PrismaOrderDetailsMapper","toDomain","findById","id","findFirst","where","create","orderInput","data","PrismaOrderMapper","toPrisma","orderProducts","productId","product","price","update","orderId","constructor","Injectable"],"mappings":";;;;+BAQaA;;;eAAAA;;;wBANc;0CACc;mCACP;+BACJ;;;;;;;;;;AAGvB,IAAA,AAAMA,wBAAN,MAAMA;IAKT,MAAMC,WAA6B;QAC/B,MAAMC,SAAS,MAAM,IAAI,CAACC,MAAM,CAACC,KAAK,CAACH,QAAQ,CAAC;YAC5CI,SAAS;gBACLC,cAAc;YAClB;QACJ;QAEA,OAAOJ,OAAOK,GAAG,CAAC,CAACC,OAASC,kDAAwB,CAACC,QAAQ,CAACF;IAClE;IAEA,MAAMG,SAASC,EAAU,EAAkB;QACvC,MAAMR,QAAQ,MAAM,IAAI,CAACD,MAAM,CAACC,KAAK,CAACS,SAAS,CAAC;YAC5CC,OAAO;gBACHF;YACJ;YACAP,SAAS;gBACLC,cAAc;YAClB;QACJ;QAEA,OAAOG,kDAAwB,CAACC,QAAQ,CAACN;IAC7C;IAEA,MAAMW,OAAOC,UAAiB,EAAkB;QAC5C,MAAMC,OAAOC,oCAAiB,CAACC,QAAQ,CAACH;QAExC,MAAMI,gBAAgBJ,WAAWV,YAAY,CAACC,GAAG,CAACD,CAAAA,eAAiB,CAAA;gBAC/De,WAAWf,aAAagB,OAAO;gBAC/BC,OAAOjB,aAAaiB,KAAK;YAC7B,CAAA;QAEA,MAAMnB,QAAQ,MAAM,IAAI,CAACD,MAAM,CAACC,KAAK,CAACW,MAAM,CAAC;YACzCE,MAAM;gBACF,GAAGA,IAAI;gBACPX,cAAc;oBACVS,QAAQK;gBACZ;YACJ;YACAf,SAAS;gBACLC,cAAc;YAClB;QACJ;QAEA,OAAOY,oCAAiB,CAACR,QAAQ,CAACN;IACtC;IAEA,MAAMoB,OAAOC,OAAe,EAAET,UAAiB,EAAkB;QAC7D,MAAMC,OAAOC,oCAAiB,CAACC,QAAQ,CAACH;QAExC,MAAMZ,QAAQ,MAAM,IAAI,CAACD,MAAM,CAACC,KAAK,CAACoB,MAAM,CAAC;YACzCV,OAAO;gBACHF,IAAIa;YACR;YACAR;QACJ;QAEA,OAAOC,oCAAiB,CAACR,QAAQ,CAACN;IACtC;IA7DAsB,YACI,AAAQvB,MAAqB,CAC/B;aADUA,SAAAA;IACR;AA4DR;AA/DaH;IADZ2B,IAAAA,kBAAU;;;eAGa,4BAAa,4BAAb,4BAAa;;GAFxB3B"}